service: serverless-rest-api-with-dynamodb

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  create:
    handler: todos/create.create
    events:
      - http:
          path: todos
          method: post
          cors: true
          origin: '*'


  list:
    handler: todos/list.list
    events:
      - http:
          path: todos
          method: get
          cors: true
          origin: '*'


  get:
    handler: todos/get.get
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true
          origin: '*'


  update:
    handler: todos/update.update
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true
          origin: '*'


  delete:
    handler: todos/delete.delete
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true
          origin: '*'

  auth:
    handler: auth/authOperation.handler
    events:
      - http:
          path: auth/{operation}
          method: post
          integration: lambda
          cors: true
          origins:
            - '*'
          request:
            passThrough: WHEN_NO_MATCH
            template:
              application/json: '{ "operation" : "$input.params(''operation'')", "authorization" : "$input.params().header.get(''Authorization'')", "payload" : $input.json(''$'') }'
          response:
            statusCodes:
              200:
                template:
                  application/json: ""
              400:
                pattern: 'Bad Request.*'
              401:
                pattern: 'Unauthorized.*'
              404:
                pattern: 'Not Found.*'
              409:
                pattern: 'Conflict.*'

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
